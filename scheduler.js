// üìÖ ATTENDANCE API FUNCTIONS
// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const VALID_STATUSES = ["present", "absent", "late", "excused", null];

const TZ = "Asia/Almaty";

// –ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
const getAlmatyNow = () => {
  const fmt = new Intl.DateTimeFormat("en-CA", {
    timeZone: TZ,
    hour12: false,
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
    hour: "2-digit",
    minute: "2-digit",
    second: "2-digit",
  });
  const parts = Object.fromEntries(
    fmt.formatToParts(new Date()).map((p) => [p.type, p.value])
  );
  return new Date(
    `${parts.year}-${parts.month}-${parts.day}T${parts.hour}:${parts.minute}:${parts.second}+05:00`
  );
};

// –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
const getAlmatyTimestamp = () => getAlmatyNow().getTime();

const getAlmatyTime = (date = null) => {
  if (!date) return getAlmatyNow();
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ Almaty –≤—Ä–µ–º—è
  const fmt = new Intl.DateTimeFormat("en-CA", {
    timeZone: TZ,
    hour12: false,
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
    hour: "2-digit",
    minute: "2-digit",
    second: "2-digit",
  });
  const parts = Object.fromEntries(
    fmt.formatToParts(date).map((p) => [p.type, p.value])
  );
  return new Date(
    `${parts.year}-${parts.month}-${parts.day}T${parts.hour}:${parts.minute}:${parts.second}+05:00`
  );
};
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
const verifyAdminAccess = async (req) => {
  // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  // const token = req.headers.authorization;
  // const decodedToken = await admin.auth().verifyIdToken(token);
  // return decodedToken.role === 'admin';
  return true; // –ü–æ–∫–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ, —Ç–∞–∫ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
};

// –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã monthly record
const createEmptyMonthlyRecord = async (teacherId, year, month) => {
  const actualStudents = await getStudentsByTeacher(teacherId);
  const daysInMonth = new Date(year, month, 0).getDate();
  const now = getAlmatyNow();

  const students = actualStudents.map((student) => ({
    studentId: student.id,
    studentName: student.fullName,
    attendance: {},
    groupId: student.groupId,
    groupName: student.groupInfo?.name || "",
    groupInfo: student.groupInfo || null,
    activityPeriod: {
      startDate: now.toISOString(),
      startYear: now.getFullYear(),
      startMonth: now.getMonth() + 1,
      startDay: now.getDate(),
      endDate: null,
      endYear: null,
      endMonth: null,
      endDay: null,
    },
    availableDays: Array.from({ length: daysInMonth }, (_, i) => i + 1),
  }));

  return {
    teacherId,
    year: parseInt(year),
    month: parseInt(month),
    students,
    metadata: {
      totalStudents: students.length,
      createdAt: getAlmatyTimestamp(),
      updatedAt: getAlmatyTimestamp(),

      schemaVersion: 1,
    },
    daysInMonth,
    recordExists: false,
    withActivityPeriods: true,
  };
};

exports.getMonthlyAttendance = functions.https.onRequest(async (req, res) => {
  return cors(req, res, async () => {
    if (req.method !== "GET") {
      return res.status(405).json({ error: "Method not allowed" });
    }

    try {
      const { teacherId, year, month } = req.query;

      if (!teacherId || !year || !month) {
        return res
          .status(400)
          .json({ error: "teacherId, year, and month are required" });
      }

      const yearNum = parseInt(year);
      const monthNum = parseInt(month);
      if (isNaN(yearNum) || isNaN(monthNum) || monthNum < 1 || monthNum > 12) {
        return res.status(400).json({ error: "Invalid year or month format" });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      const hasAccess = await verifyAdminAccess(req);
      if (!hasAccess) {
        return res.status(403).json({ error: "Admin access required" });
      }

      const recordId = `${teacherId}_${year}_${month}`;
      const recordRef = db.ref(`monthly_records/${recordId}`);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è
      const result = await recordRef.transaction((data) => {
        if (data !== null) {
          // –ó–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
          return data;
        }
        // –ó–∞–ø–∏—Å—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: actualStudents –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Å–Ω–∞—Ä—É–∂–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        return null; // –°–∏–≥–Ω–∞–ª —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å
      });

      let response;

      if (result.snapshot.val() === null) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        response = await createEmptyMonthlyRecord(teacherId, yearNum, monthNum);
        await recordRef.set(response);
        console.info(`üìù Created new monthly record: ${recordId}`);
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏
        const data = result.snapshot.val();
        const now = getAlmatyNow();
        const actualStudents = await getStudentsByTeacher(teacherId);
        const daysInMonth = new Date(yearNum, monthNum, 0).getDate();
        const currentStudents = data?.students || [];

        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï–• —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ –∑–∞–ø–∏—Å–∏ + –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö
        const existingStudentsMap = new Map();

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö)
        currentStudents.forEach((student) => {
          existingStudentsMap.set(student.studentId, student);
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        actualStudents.forEach((student) => {
          const existing = existingStudentsMap.get(student.id) || {};

          const activityPeriod = existing.activityPeriod || {
            startDate: now.toISOString(),
            startYear: now.getFullYear(),
            startMonth: now.getMonth() + 1,
            startDay: now.getDate(),
            endDate: null,
            endYear: null,
            endMonth: null,
            endDay: null,
          };

          // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º —Å—Ç—É–¥–µ–Ω—Ç–µ
          existingStudentsMap.set(student.id, {
            ...existing, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏ attendance
            studentId: student.id,
            studentName: student.fullName,
            attendance: existing.attendance || {},
            groupId: student.groupId,
            groupName: student.groupInfo?.name || "",
            groupInfo: student.groupInfo || null,
            activityPeriod,
            availableDays: Array.from({ length: daysInMonth }, (_, i) => i + 1),
          });
        });

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Map –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞—Å—Å–∏–≤
        const allStudents = Array.from(existingStudentsMap.values());

        response = {
          teacherId,
          year: yearNum,
          month: monthNum,
          students: allStudents,
          metadata: {
            totalStudents: allStudents.length,
            activeStudents: actualStudents.length, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            updatedAt: getAlmatyTimestamp(),
            schemaVersion: 1,
            ...(data?.metadata?.createdAt
              ? { createdAt: data.metadata.createdAt }
              : { createdAt: getAlmatyTimestamp() }),
          },
          daysInMonth,
          recordExists: true,
          withActivityPeriods: true,
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö
        if (actualStudents.length !== (data.metadata?.activeStudents || 0)) {
          await recordRef.update({
            students: response.students,
            "metadata/updatedAt": getAlmatyTimestamp(),
            "metadata/totalStudents": allStudents.length,
            "metadata/activeStudents": actualStudents.length,
          });
          console.info(
            `üîÑ Updated monthly record: ${recordId} with ${allStudents.length} total students (${actualStudents.length} active)`
          );
        }
      }

      res.json(response);
    } catch (error) {
      console.error("‚ùå Error in getMonthlyAttendance:", error);
      res.status(500).json({ error: error.message });
    }
  });
});

exports.updateAttendance = functions.https.onRequest(async (req, res) => {
  return cors(req, res, async () => {
    if (req.method !== "POST") {
      return res.status(405).json({ error: "Method not allowed" });
    }

    try {
      const { teacherId, year, month, studentId, date, status } = req.body;

      // –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
      if (!teacherId || !year || !month || !studentId || !date) {
        return res.status(400).json({
          error: "Required fields: teacherId, year, month, studentId, date",
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è status (–º–æ–∂–µ—Ç –±—ã—Ç—å null)
      if (!("status" in req.body)) {
        return res.status(400).json({
          error: "Field 'status' is required (can be null)",
        });
      }

      const yearNum = parseInt(year);
      const monthNum = parseInt(month);
      const dateNum = parseInt(date);

      if (isNaN(yearNum) || isNaN(monthNum) || isNaN(dateNum)) {
        return res
          .status(400)
          .json({ error: "year, month, and date must be valid numbers" });
      }

      // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
      if (!VALID_STATUSES.includes(status)) {
        return res.status(400).json({
          error: `status must be one of: ${VALID_STATUSES.map(String).join(
            ", "
          )}`,
        });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      const hasAccess = await verifyAdminAccess(req);
      if (!hasAccess) {
        return res.status(403).json({ error: "Admin access required" });
      }

      const recordId = `${teacherId}_${year}_${month}`;
      const recordRef = db.ref(`monthly_records/${recordId}`);
      const snapshot = await recordRef.once("value");

      if (!snapshot.exists()) {
        return res
          .status(404)
          .json({ error: "Monthly attendance record not found" });
      }

      const record = snapshot.val();
      const students = record.students || [];

      const studentIndex = students.findIndex((s) => s.studentId === studentId);
      if (studentIndex === -1) {
        return res
          .status(404)
          .json({ error: "Student not found in this attendance record" });
      }

      const student = students[studentIndex];
      const dateKey = String(dateNum);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      await recordRef
        .child(`students/${studentIndex}/attendance`)
        .transaction((prevAttendance) => {
          const attendance = prevAttendance || {};
          if (status === null) {
            delete attendance[dateKey];
          } else {
            attendance[dateKey] = status;
          }
          return attendance;
        });

      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      await recordRef.child("metadata/updatedAt").set(getAlmatyTimestamp());
      console.info(
        `‚úÖ Attendance updated: ${studentId} | ${year}-${month}-${date} => ${
          status || "removed"
        }`
      );

      res.json({
        success: true,
        message: `Attendance updated for ${student.studentName}`,
        updated: {
          studentId,
          studentName: student.studentName,
          date: dateNum,
          status: status || "not marked",
          groupName: student.groupName || "Unknown group",
        },
        activityPeriod: student.activityPeriod,
      });
    } catch (error) {
      console.error("‚ùå Error updating attendance:", error);
      res.status(500).json({ error: error.message });
    }
  });
});

const DAY_NAMES = [
  "sunday",
  "monday",
  "tuesday",
  "wednesday",
  "thursday",
  "friday",
  "saturday",
];
// –°—Ç–∞—Ç—É—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è "—É–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ"
const SET_STATUSES = new Set(["present", "absent", "late", "excused"]);

const toLc = (v) => String(v ?? "").toLowerCase();
const pad2 = (n) => String(n).padStart(2, "0");

/** –ü—Ä–æ–≤–µ—Ä–∫–∞ "–∫–æ–Ω–µ—Ü –∑–∞–Ω—è—Ç–∏—è —É–∂–µ –ø—Ä–æ—à—ë–ª" –¥–ª—è —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ "HH:mm" (–ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –ê–ª–º–∞—Ç—ã). */
function isPastEndTimeHHmm(endTimeHHmm, now = getAlmatyNow()) {
  if (typeof endTimeHHmm !== "string") return false;
  const m = endTimeHHmm.match(/^(\d{1,2}):(\d{2})$/);
  if (!m) return false;
  const h = Number(m[1]);
  const min = Number(m[2]);
  if (h < 0 || h > 23 || min < 0 || min > 59) return false;

  const end = new Date(now);
  end.setHours(h, min, 0, 0);
  return now.getTime() >= end.getTime();
}

exports.autoMarkPresents = functions
  .region("us-central1") // –í–ê–ñ–ù–û: —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ä–µ–≥–∏–æ–Ω–æ–≤—Å–∫–∏–º —Ç–æ–ø–∏–∫–æ–º Cloud Scheduler
  .pubsub.schedule("0 22 * * 1-6") // –ø–Ω‚Äì—Å–±, 22:00
  .timeZone(TZ)
  .onRun(async () => {
    try {
      const now = getAlmatyNow();
      const todayName = DAY_NAMES[now.getDay()];
      const year = now.getFullYear();
      const month = now.getMonth() + 1;
      const day = now.getDate();

      console.info(
        `üïê autoMarkPresents @22:00 ${year}-${pad2(month)}-${pad2(
          day
        )} (${todayName})`
      );

      if (todayName === "sunday") {
        console.info("üìÖ Skip Sunday");
        return null;
      }

      // --- 1) —á–∏—Ç–∞–µ–º –≥—Ä—É–ø–ø—ã
      const groupsSnap = await db.ref("groups").once("value");
      const groupsObj = groupsSnap.val() || {};

      const groupsTodayMap = new Map();

      for (const [groupId, groupData] of Object.entries(groupsObj)) {
        if (!groupData || !groupData.teacherId) {
          console.debug(`‚ö†Ô∏è Skip group ${groupId}: no teacherId or data`);
          continue;
        }

        let added = false;

        // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: schedule: [{ days:[], startTime, endTime }, ...]
        if (Array.isArray(groupData.schedule)) {
          for (const [slotIndex, slot] of groupData.schedule.entries()) {
            const days = Array.isArray(slot?.days)
              ? slot.days.map(toLc)
              : undefined;
            if (
              days?.includes(todayName) &&
              slot?.endTime &&
              isPastEndTimeHHmm(slot.endTime, now)
            ) {
              groupsTodayMap.set(`${groupId}_${slotIndex}`, {
                id: groupId,
                teacherId: groupData.teacherId,
                name: groupData.name || groupId,
                startTime: slot.startTime || null,
                endTime: slot.endTime,
              });
              added = true;
            }
          }
        }
        // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: { days:[], startTime, endTime }
        else if (Array.isArray(groupData.days)) {
          const days = groupData.days.map(toLc);
          if (
            days.includes(todayName) &&
            groupData?.endTime &&
            isPastEndTimeHHmm(groupData.endTime, now)
          ) {
            groupsTodayMap.set(groupId, {
              id: groupId,
              teacherId: groupData.teacherId,
              name: groupData.name || groupId,
              startTime: groupData.startTime || null,
              endTime: groupData.endTime,
            });
            added = true;
          }
        }

        if (!added) {
          console.debug(`üì≠ No ended lessons today for group ${groupId}`);
        }
      }

      const groupsToday = Array.from(groupsTodayMap.values());
      if (groupsToday.length === 0) {
        console.info("üì≠ No groups had classes today");
        return null;
      }

      console.info(
        `üìö Found ${groupsToday.length} groups today:`,
        groupsToday.map((g) => g.name)
      );

      // --- 2) –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º
      const teachersMap = new Map();
      for (const g of groupsToday) {
        if (!teachersMap.has(g.teacherId)) teachersMap.set(g.teacherId, []);
        teachersMap.get(g.teacherId).push(g);
      }

      // --- 3) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞—ë–º/—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å—å –º–µ—Å—è—Ü–∞ –∏ –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º present
      for (const [teacherId, teacherGroups] of teachersMap) {
        const recordId = `${teacherId}_${year}_${pad2(month)}`;
        const recordRef = db.ref(`monthly_records/${recordId}`);

        // ensure monthly record exists
        const recSnap = await recordRef.once("value");
        if (!recSnap.exists()) {
          console.info(
            `üìù Creating monthly record for ${teacherId} ${year}-${pad2(month)}`
          );
          const newRecord = await createEmptyMonthlyRecord(
            teacherId,
            year,
            month
          );
          await recordRef.set(newRecord);
        }

        const freshSnap = await recordRef.once("value");
        const record = freshSnap.val() || {};
        const students = record.students || [];

        // NB: —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º —Ñ–∞–∫—Ç "—É –≥—Ä—É–ø–ø—ã –±—ã–ª —É—Ä–æ–∫ —Å–µ–≥–æ–¥–Ω—è –∏ –æ–Ω –∑–∞–∫–æ–Ω—á–∏–ª—Å—è"
        const groupIdsToday = new Set(teacherGroups.map((g) => g.id));

        let changes = 0;
        const updates = {};
        const todayKey = String(day);

        for (let i = 0; i < students.length; i++) {
          const st = students[i];
          if (!groupIdsToday.has(st.groupId)) continue;

          const current =
            (st.attendance && st.attendance[todayKey]) ?? undefined;

          if (!SET_STATUSES.has(current)) {
            updates[`students/${i}/attendance/${todayKey}`] = "present";
            changes++;
          }
        }

        if (changes > 0) {
          updates["metadata/updatedAt"] = getAlmatyTimestamp();
          await recordRef.update(updates);
          console.info(
            `‚úÖ ${teacherId}: auto-marked ${changes} students as 'present' for ${year}-${pad2(
              month
            )}-${pad2(day)}`
          );
        } else {
          console.info(`üìã ${teacherId}: no changes needed`);
        }
      }

      console.info("üèÅ autoMarkPresents completed successfully");
      return null;
    } catch (err) {
      console.error("‚ùå autoMarkPresents failed:", err);
      return null;
    }
  });
